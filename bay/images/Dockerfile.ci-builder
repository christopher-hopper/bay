FROM hashicorp/terraform:light AS terraform
FROM php:7.4-cli-alpine
ARG AHOY_VERSION=2.0.0
ARG GOJQ_VERSION=0.11.2
ARG HUB_VERSION=2.14.2
ARG LAGOON_CLI_VERSION=0.10.0

# Ensure temp files dont end up in image.
VOLUME /tmp

# Install SDP ci dependencies.
## Add Python dependencies.
COPY --from=terraform /bin/terraform /bin/terraform

RUN apk add --no-cache \
    aws-cli \
    bash \
    cargo \
    composer \
    git \
    libc6-compat \
    libgcc \
    libffi-dev \
    musl-dev \
    ncurses \
    npm \
    openssl-dev \
    openssh \
    patch \
    py3-pip \
    python3 \
    python3-dev

## Python3 by default.
RUN ln -s /usr/bin/python3 /usr/bin/python

# Install docker && docker compose.
# @see https://download.docker.com/linux/static/stable/x86_64
# @see https://github.com/docker/compose/releases
ENV DOCKER_VERSION=20.10.7
ENV DOCKER_COMPOSE_VERSION=1.29.2
RUN curl -L -o "/home/docker-${DOCKER_VERSION}.tgz" "https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz" \
    && tar -xz -C /home -f "/home/docker-${DOCKER_VERSION}.tgz" \
    && mv /home/docker/* /usr/bin \
    && docker --version
RUN cd /tmp/ && \
    wget --no-check-certificate -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && \
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.31-r0/glibc-2.31-r0.apk && \
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.31-r0/glibc-bin-2.31-r0.apk && \
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.31-r0/glibc-i18n-2.31-r0.apk && \
    apk add glibc-2.31-r0.apk glibc-bin-2.31-r0.apk glibc-i18n-2.31-r0.apk && \
    /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8 && \
    rm -rf /tmp/* && \
    cd - && \
    curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && \
    chmod +x /usr/local/bin/docker-compose && \
    ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
RUN docker-compose --version

## Install GitHub CLI tool.
RUN curl -L "https://github.com/github/hub/releases/download/v${HUB_VERSION}/hub-linux-amd64-${HUB_VERSION}.tgz" -o /tmp/hub-linux-amd64-${HUB_VERSION}.tgz && \
    tar -C /tmp -xzvf /tmp/hub-linux-amd64-${HUB_VERSION}.tgz && \
    chmod +x /tmp/hub-linux-amd64-${HUB_VERSION}/bin/hub && \
    mv /tmp/hub-linux-amd64-${HUB_VERSION}/bin/hub /usr/local/bin

# Install Python dependencies not available in apk.
RUN pip install \
    ansible \
    ansible-lint \
    flake8 \
    yamllint \
    boto3

## Install required PHP extensions for Drupal
RUN apk add --no-cache \
    libpng \
    libpng-dev \
    libjpeg-turbo-dev \
    libwebp-dev \
    zlib-dev

RUN docker-php-ext-configure gd --enable-gd --with-jpeg
RUN docker-php-ext-install -j$(nproc) gd

# Install Lagoon CLI.
RUN curl -L "https://github.com/amazeeio/lagoon-cli/releases/download/${LAGOON_CLI_VERSION}/lagoon-cli-${LAGOON_CLI_VERSION}-linux-amd64" -o /usr/local/bin/lagoon && \
    chmod +x /usr/local/bin/lagoon
RUN lagoon config feature --disable-project-directory-check true

# Install gojq.
RUN curl -L https://github.com/itchyny/gojq/releases/download/v${GOJQ_VERSION}/gojq_v${GOJQ_VERSION}_linux_amd64.tar.gz --output /tmp/gojq_v${GOJQ_VERSION}_linux_amd64.tar.gz && \
    tar -C /tmp -xvf /tmp/gojq_v${GOJQ_VERSION}_linux_amd64.tar.gz && \
    chmod +x /tmp/gojq_v${GOJQ_VERSION}_linux_amd64/gojq && \
    mv /tmp/gojq_v${GOJQ_VERSION}_linux_amd64/gojq /usr/local/bin

# Install Ahoy.
# @see https://github.com/ahoy-cli/ahoy/releases
RUN curl -L -o "/usr/local/bin/ahoy" "https://github.com/ahoy-cli/ahoy/releases/download/${AHOY_VERSION}/ahoy-bin-$(uname -s)-amd64" \
  && chmod +x /usr/local/bin/ahoy \
  && ahoy --version

# Install bats.
RUN npm install -g bats@1.2.1

# Cleanup tmp when we're done.
RUN rm -rf /tmp/*
